/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Blockchain Proof
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ConfigurationResponse } from '../model/ConfigurationResponse';
import { CreateConfigurationRequest } from '../model/CreateConfigurationRequest';
import { ErrorResponse } from '../model/ErrorResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { ApiClientConfiguration }                                     from '../configuration';

@Injectable()
export class ConfigurationService {

    protected basePath = 'https://gw.api.cloud.sphereon.com/blockchain/proof/0.10';
    public defaultHeaders = new HttpHeaders();
    public configuration = new ApiClientConfiguration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: ApiClientConfiguration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
     * Create a new configuration
     * Create a new configuration
     * @param request Create a new Proof of Existence configuration using the provided settings. The context points to a context of the Easy Blockchain API. When you have no own context, simply use &#39;multichain&#39; without the quotes as context. You will be using our multichain ledger then, which is recomended during development/testing
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createConfiguration(request: CreateConfigurationRequest, observe?: 'body', reportProgress?: boolean): Observable<ConfigurationResponse>;
    public createConfiguration(request: CreateConfigurationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurationResponse>>;
    public createConfiguration(request: CreateConfigurationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurationResponse>>;
    public createConfiguration(request: CreateConfigurationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling createConfiguration.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2schema) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        let httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ConfigurationResponse>(`${this.basePath}/config`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get configuration
     * Get the configuration for registration/verification
     * @param configName The configuration name for this operation
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConfiguration(configName: string, observe?: 'body', reportProgress?: boolean): Observable<ConfigurationResponse>;
    public getConfiguration(configName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurationResponse>>;
    public getConfiguration(configName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurationResponse>>;
    public getConfiguration(configName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (configName === null || configName === undefined) {
            throw new Error('Required parameter configName was null or undefined when calling getConfiguration.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2schema) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<ConfigurationResponse>(`${this.basePath}/config/${encodeURIComponent(String(configName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
